{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/Form/Form.tsx","api/users.ts","api/todos.ts","services/getPostId.ts","App.tsx","services/getTodos.ts","services/getUsers.ts","services/getUserById.ts","index.tsx"],"names":["UserInfo","user","email","name","className","href","TodoInfo","todo","id","title","completed","cn","TodoList","todos","map","Form","onSubmit","users","useState","setTitle","titleError","setTitleError","userId","setUserId","userIdError","setUserIdError","action","method","event","preventDefault","trim","htmlFor","type","placeholder","value","onChange","target","disabled","username","getPostId","Math","max","App","todosFromServer","usersFromServer","find","setTodos","correctTodo","currTodos","ReactDOM","render","document","getElementById"],"mappings":"4OAOaA,EAA4B,SAAC,GAEnC,IADLC,EACI,EADJA,KAGEC,EAEED,EAFFC,MACAC,EACEF,EADFE,KAGF,OACE,mBAAGC,UAAU,WAAWC,KAAI,iBAAYH,GAAxC,SACGC,KCRMG,EAA4B,SAAC,GAEnC,IADLC,EACI,EADJA,KAGEC,EAIED,EAJFC,GACAC,EAGEF,EAHFE,MACAC,EAEEH,EAFFG,UACAT,EACEM,EADFN,KAGF,OACE,mCACE,0BACE,UAASO,EACTJ,UAAWO,IAAG,WAAY,CACxB,sBAAuBD,IAH3B,UAME,oBAAIN,UAAU,kBAAd,SACGK,IAGFR,GACC,cAAC,EAAD,CAAUA,KAAMA,UCxBbW,EAA4B,SAAC,GAAD,IACvCC,EADuC,EACvCA,MADuC,OAGvC,yBAAST,UAAU,WAAnB,SACGS,EAAMC,KAAI,SAAAP,GAAI,OACb,cAAC,EAAD,CACEA,KAAMA,GACDA,EAAKC,UCNLO,EAAwB,SAAC,GAG/B,IAFLC,EAEI,EAFJA,SACAC,EACI,EADJA,MAEA,EAA0BC,mBAAS,IAAnC,mBAAOT,EAAP,KAAcU,EAAd,KACA,EAAoCD,oBAAS,GAA7C,mBAAOE,EAAP,KAAmBC,EAAnB,KAEA,EAA4BH,mBAAS,GAArC,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAAsCL,oBAAS,GAA/C,mBAAOM,EAAP,KAAoBC,EAApB,KA6CA,OACE,uBACEC,OAAO,aACPC,OAAO,OACPX,SA1CiB,SAACY,GAGpB,GAFAA,EAAMC,kBAEDpB,IAAUa,IAAWb,EAAMqB,OAI9B,OAHAT,GAAeZ,EAAMqB,aACrBL,GAAgBH,GAKlB,IAAMf,EAAa,CACjBC,GAAI,EACJC,MAAOA,EAAMqB,OACbR,SACAZ,WAAW,GAGbM,EAAST,GArBTY,EAAS,IACTI,EAAU,IA0CV,UAKE,sBAAKnB,UAAU,QAAf,UACE,uBAAO2B,QAAQ,QAAf,oBAIA,uBACEC,KAAK,OACL,UAAQ,aACRxB,GAAG,QACHyB,YAAY,gBACZC,MAAOzB,EACP0B,SAjCkB,SAACP,GACrBR,GACFC,GAAeD,GAGjBD,EAASS,EAAMQ,OAAOF,UA+BjBd,GACC,sBAAMhB,UAAU,QAAhB,qCAOJ,sBAAKA,UAAU,QAAf,UACE,uBAAO2B,QAAQ,OAAf,mBAIA,yBACE,UAAQ,aACRvB,GAAG,OACH0B,MAAOZ,EACPa,SA7CmB,SAACP,GACtBJ,GACFC,GAAgBD,GAGlBD,GAAWK,EAAMQ,OAAOF,QAoCpB,UAME,wBAAQA,MAAM,IAAIG,UAAQ,EAA1B,2BAICpB,EAAMH,KAAI,SAACb,GAAD,OACT,wBACEiC,MAAOjC,EAAKO,GADd,SAIGP,EAAKE,MAFDF,EAAKO,UAOfgB,GACC,sBAAMpB,UAAU,QAAhB,qCAOJ,wBACE4B,KAAK,SACL,UAAQ,eAFV,qBC3HS,GACb,CACExB,GAAI,EACJL,KAAM,gBACNmC,SAAU,OACVpC,MAAO,qBAET,CACEM,GAAI,EACJL,KAAM,eACNmC,SAAU,YACVpC,MAAO,qBAET,CACEM,GAAI,EACJL,KAAM,mBACNmC,SAAU,WACVpC,MAAO,sBAET,CACEM,GAAI,EACJL,KAAM,mBACNmC,SAAU,WACVpC,MAAO,6BAET,CACEM,GAAI,EACJL,KAAM,mBACNmC,SAAU,SACVpC,MAAO,4BAET,CACEM,GAAI,EACJL,KAAM,uBACNmC,SAAU,mBACVpC,MAAO,2BAET,CACEM,GAAI,EACJL,KAAM,kBACNmC,SAAU,eACVpC,MAAO,0BAET,CACEM,GAAI,EACJL,KAAM,2BACNmC,SAAU,gBACVpC,MAAO,wBAET,CACEM,GAAI,EACJL,KAAM,kBACNmC,SAAU,WACVpC,MAAO,2BAET,CACEM,GAAI,GACJL,KAAM,qBACNmC,SAAU,iBACVpC,MAAO,2BC3DI,GACb,CACEM,GAAI,EACJC,MAAO,qBACPC,WAAW,EACXY,OAAQ,GAEV,CACEd,GAAI,GACJC,MAAO,kBACPC,WAAW,EACXY,OAAQ,GAEV,CACEd,GAAI,EACJC,MAAO,qCACPC,WAAW,EACXY,OAAQ,ICfCiB,EAAY,SAAC1B,GACxB,OAAO2B,KAAKC,IAAL,MAAAD,KAAI,YAAQ3B,EAAMC,KAAI,SAACP,GAAD,OAAUA,EAAKC,QAAO,GCSxCkC,EAAM,WACjB,MAA0BxB,mBCTRyB,EAAgB7B,KAAI,SAACP,GAAD,mBAAC,eAClCA,GADiC,IAEpCN,KAAM2C,EAAgBC,MAAK,SAAC5C,GAAD,OAAUA,EAAKO,KAAOD,EAAKe,WAAW,WDOnE,mBAAOT,EAAP,KAAciC,EAAd,KACA,EAAgB5B,mBEXT0B,GFWA3B,EAAP,oBAeA,OACE,sBAAKb,UAAU,MAAf,UACE,+CAEA,cAAC,EAAD,CACEY,SAlBa,SAACT,GAClB,IGfwBe,EHelByB,EAAW,2BACZxC,GADY,IAEfC,GAAI+B,EAAU1B,GACdZ,MGlBsBqB,EHkBJf,EAAKe,OGjBpBsB,EAAgBC,MAAK,SAAC5C,GAAD,OAAUA,EAAKO,KAAOc,MAAW,QHoB3DwB,GAAS,SAACE,GAAD,4BACJA,GADI,CAEPD,QAUE9B,MAAOA,IAGT,cAAC,EAAD,CACEJ,MAAOA,QIpCfoC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.807eb3f9.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({\n  user,\n}) => {\n  const {\n    email,\n    name,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <>\n      <article\n        data-id={id}\n        className={cn('TodoInfo', {\n          'TodoInfo--completed': completed,\n        })}\n      >\n        <h2 className=\"TodoInfo__title\">\n          {title}\n        </h2>\n\n        {user && (\n          <UserInfo user={user} />\n        )}\n      </article>\n    </>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n}) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo\n        todo={todo}\n        key={todo.id}\n      />\n    ))}\n  </section>\n);\n","import React, { useState } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  onSubmit: (todo: Todo) => void;\n  users: User[];\n};\n\nexport const Form: React.FC<Props> = ({\n  onSubmit,\n  users,\n}) => {\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [userIdError, setUserIdError] = useState(false);\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!title || !userId || !title.trim()) {\n      setTitleError(!title.trim());\n      setUserIdError(!userId);\n\n      return;\n    }\n\n    const todo: Todo = {\n      id: 0,\n      title: title.trim(),\n      userId,\n      completed: false,\n    };\n\n    onSubmit(todo);\n\n    reset();\n  };\n\n  const handleChangeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (titleError) {\n      setTitleError(!titleError);\n    }\n\n    setTitle(event.target.value);\n  };\n\n  const handleChangeSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (userIdError) {\n      setUserIdError(!userIdError);\n    }\n\n    setUserId(+event.target.value);\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\">\n        <label htmlFor=\"title\">\n          Title:\n        </label>\n\n        <input\n          type=\"text\"\n          data-cy=\"titleInput\"\n          id=\"title\"\n          placeholder=\"Enter a title\"\n          value={title}\n          onChange={handleChangeTitle}\n        />\n\n        {titleError && (\n          <span className=\"error\">\n            Please enter a title\n          </span>\n        )}\n\n      </div>\n\n      <div className=\"field\">\n        <label htmlFor=\"user\">\n          User:\n        </label>\n\n        <select\n          data-cy=\"userSelect\"\n          id=\"user\"\n          value={userId}\n          onChange={handleChangeSelect}\n        >\n          <option value=\"0\" disabled>\n            Choose a user\n          </option>\n\n          {users.map((user) => (\n            <option\n              value={user.id}\n              key={user.id}\n            >\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {userIdError && (\n          <span className=\"error\">\n            Please choose a user\n          </span>\n        )}\n\n      </div>\n\n      <button\n        type=\"submit\"\n        data-cy=\"submitButton\"\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { Todo } from '../types/Todo';\n\nexport const getPostId = (todos: Todo[]) => {\n  return Math.max(...todos.map((todo) => todo.id)) + 1;\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport { Todo } from './types/Todo';\nimport { Form } from './components/Form';\nimport { getTodos } from './services/getTodos';\nimport { getPostId } from './services/getPostId';\nimport { getUserById } from './services/getUserById';\nimport { User } from './types/User';\nimport { getUsers } from './services/getUsers';\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(getTodos());\n  const [users] = useState<User[]>(getUsers());\n\n  const addNewTodo = (todo: Todo) => {\n    const correctTodo = {\n      ...todo,\n      id: getPostId(todos),\n      user: getUserById(todo.userId),\n    };\n\n    setTodos((currTodos) => [\n      ...currTodos,\n      correctTodo,\n    ]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <Form\n        onSubmit={addNewTodo}\n        users={users}\n      />\n\n      <TodoList\n        todos={todos}\n      />\n    </div>\n  );\n};\n","import usersFromServer from '../api/users';\nimport todosFromServer from '../api/todos';\n\nexport const getTodos = () => {\n  const fullTodos = todosFromServer.map((todo) => ({\n    ...todo,\n    user: usersFromServer.find((user) => user.id === todo.userId) || null,\n  }));\n\n  return fullTodos;\n};\n","import usersFromServer from '../api/users';\n\nexport const getUsers = () => {\n  return usersFromServer;\n};\n","import usersFromServer from '../api/users';\n\nexport const getUserById = (userId: number) => {\n  return usersFromServer.find((user) => user.id === userId) || null;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}